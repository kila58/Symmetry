/**                  ====================                      *
  *      _____                                __               *
  *     / ___/__  ______ ___  ____ ___  ___  / /________  __   *
  *     \__ \/ / / / __ `__ \/ __ `__ \/ _ \/ __/ ___/ / / /   *
  *    ___/ / /_/ / / / / / / / / / / /  __/ /_/ /  / /_/ /    *
  *   /____/\__, /_/ /_/ /_/_/ /_/ /_/\___/\__/_/   \__, /     * 
  *        /____/                                  /____/      *
  *   - by Defc0n                                              *
  *                  ====================                      **/

#pragma once
#include "console_entry.h"

NAMESPACE_CORE(Console)

class CommandArgs 
{
private:

	vector<string>		m_vArguments;
	string				m_sCommandName;
	bool				m_bSilent;
	string				m_sAlias;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn CommandArgs::CommandArgs()
	///
	/// \brief Default constructor.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	CommandArgs()
	{
		this->m_sCommandName = "";
		this->m_bSilent = false;
		this->m_sAlias = "";
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn int CommandArgs::GetArgCount()
	///
	/// \brief Returns the amount of arguments.
	///
	/// \return .
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int GetArgCount()
	{
		return this->m_vArguments.size();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn string CommandArgs::GetArgAt(uint32 iIndex)
	///
	/// \brief Returns an argument at iIndex.
	///
	/// \param iIndex .
	///
	/// \return .
	////////////////////////////////////////////////////////////////////////////////////////////////////

	string GetArgAt(uint32 iIndex)
	{
		return this->m_vArguments[iIndex];
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn string CommandArgs::GetArgString()
	///
	/// \brief Returns each one of the arguments as an entire string.
	///
	/// \return The arg string.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	string GetArgString()
	{
		if (this->m_sCommandName == "")
			return "";

		string s = "";

		for (string arg : this->m_vArguments)
		{
			s += arg + " ";
		}

		return s.substr( 0, s.length() - 1 );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn string CommandArgs::GetCommandString()
	///
	/// \brief Returns each one of the arguments and the command itself as an entire string.
	///
	/// \return The command string.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	string GetCommandString()
	{
		if (this->m_sCommandName == "")
			return "";

		string s = this->m_sCommandName + " ";

		for (string arg : this->m_vArguments)
		{
			s += arg + " ";
		}

		return s.substr( 0, s.length() - 1 );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn string CommandArgs::GetCommandName()
	///
	/// \brief Returns the name of the command.
	///
	/// \return The command name.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	string GetCommandName()
	{
		return this->m_sCommandName;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void CommandArgs::SetCommandName(string sName)
	///
	/// \brief	Sets the command's name.
	///
	/// \param	sName	The name.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetCommandName(string sName)
	{
		this->m_sCommandName = sName;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn void CommandArgs::Push(string sStr)
	///
	/// \brief Pushes an object into the argument vector.  If the name isn't set,
	/// 	   this will act as the name rather than the first argument.
	///
	/// \param sStr The string to push.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Push(string sStr)
	{
		if (sStr == "")
			return;

		if (this->m_sCommandName == "")
		{
			this->m_sCommandName = sStr;
		}
		else 
		{
			this->m_vArguments.push_back(sStr);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void bool CommandArgs::IsSilent()
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool IsSilent()
	{
		return this->m_bSilent;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void CommandArgs::SetSilent(bool bSilent)
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSilent(bool bSilent)
	{
		this->m_bSilent = bSilent;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	bool CommandArgs::IsAlias()
	////////////////////////////////////////////////////////////////////////////////////////////////////

	string GetAlias()
	{
		return this->m_sAlias;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	void CommandArgs::SetAlias(string sAlias)
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAlias(string sAlias)
	{
		this->m_sAlias = sAlias;
	}
};

NAMESPACE_END2