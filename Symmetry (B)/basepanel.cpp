/**                  ====================                      *
*      _____                                __               *
*     / ___/__  ______ ___  ____ ___  ___  / /________  __   *
*     \__ \/ / / / __ `__ \/ __ `__ \/ _ \/ __/ ___/ / / /   *
*    ___/ / /_/ / / / / / / / / / / /  __/ /_/ /  / /_/ /    *
*   /____/\__, /_/ /_/ /_/_/ /_/ /_/\___/\__/_/   \__, /     *
*        /____/                                  /____/      *
*   - by Defc0n                                              *
*                  ====================                      **/

#include "basepanel.h"

#include "mouseutil.h"
#include "renderutil.h"

#include "global.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	BasePanel::BasePanel()
///
/// \brief	Default constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////

BasePanel::BasePanel()
{
	this->m_iX = 0;
	this->m_iY = 0;
	this->m_iWidth = 0;
	this->m_iHeight = 0;
	this->m_pParent = 0;
	this->m_iPanelAttributes = 0;
	this->m_bVisible = true;
	this->m_bInitialized = false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	BasePanel::~BasePanel()
///
/// \brief	Destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////

BasePanel::~BasePanel()
{
	this->Shutdown();

	// Parent shouldn't keep track of us anymore
	if (this->m_pParent)
	{
		this->m_pParent->Remove(this);
	}

	// Delete each sub child
	for (BasePanel* child : m_vChildren)
	{
		//delete child;
	}

	// Then nigger erase that bitch
	this->m_vChildren.clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::SetPos(int x, int y)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::SetPos(int x, int y)
{
	this->m_iX = x;
	this->m_iY = y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::GetRealPos(int* x, int* y)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::GetRealPos(int* x, int* y)
{
	*x = *y = 0;
	this->GetPos(x, y);

	BasePanel* panel = this->GetParent();
	for (; panel; panel = panel->GetParent())
	{
		int _x, _y;
		panel->GetPos(&_x, &_y);

		*x += _x;
		*y += _y;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::TranslateToRealPos(int* x, int* y)
///
/// \brief	Translate a relative position to a full screen position.
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::TranslateToRealPos(int* x, int* y)
{
	int rx, ry;
	this->GetRealPos(&rx, &ry);

	*x += rx;
	*y += ry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::GetPos(int* x, int* y)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::GetPos(int* x, int* y)
{
	*x = this->m_iX;
	*y = this->m_iY;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::SetSize(int w, int h)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::SetSize(int w, int h)
{
	this->m_iWidth = w;
	this->m_iHeight = h;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::GetSize(int* x, int* y)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::GetSize(int* w, int* h)
{
	*w = this->m_iWidth;
	*h = this->m_iHeight;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::SetVisible(bool bVisible)	
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::SetVisible(bool bVisible)
{
	this->m_bVisible = bVisible;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	bool BasePanel::GetVisible()
////////////////////////////////////////////////////////////////////////////////////////////////////

bool BasePanel::GetVisible()
{
	return this->m_bVisible;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::SetParent(BasePanel* pPanel)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::SetParent(BasePanel* pPanel)
{
	if (this->m_pParent)
	{
		// We are no longer our parent's child
		this->m_pParent->Remove(this);
	}

	// Notify the parent that we are now their child
	pPanel->Add(this);

	// Store our parent
	this->m_pParent = pPanel;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	BasePanel* BasePanel::GetParent()
////////////////////////////////////////////////////////////////////////////////////////////////////

BasePanel* BasePanel::GetParent()
{
	return this->m_pParent;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	vector<BasePanel*> GetChildren()
////////////////////////////////////////////////////////////////////////////////////////////////////

vector<BasePanel*> BasePanel::GetChildren()
{
	return this->m_vChildren;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	BasePanel* BasePanel::GetChild(int iChild)
////////////////////////////////////////////////////////////////////////////////////////////////////

BasePanel* BasePanel::GetChild(int iChild)
{
	if (iChild < 0 || iChild >= this->GetChildCount())
		return NULL;

	return this->m_vChildren[iChild];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	int BasePanel::GetChildCount()
////////////////////////////////////////////////////////////////////////////////////////////////////

int BasePanel::GetChildCount()
{
	return (int)this->m_vChildren.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::Remove()
///
/// \brief	Removes this object from the parent's children vector and deletes this object.
/// 		
/// 		NOTE: Destructor handles removing this panel from the parent.
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::Remove()
{
	delete this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::Remove(int iChild)
///
/// \brief	Removes a child by index, the child is not deleted.
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::Remove(int iChild)
{
	this->m_vChildren.erase(this->m_vChildren.begin() + iChild);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::Remove(BasePanel* pPanel)
///
/// \brief	Removes a child by pointer, the child is not deleted.
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::Remove(BasePanel* pPanel)
{
	for (int i = 0; i < this->GetChildCount(); i++)
	{
		if (this->GetChild(i) == pPanel)
		{
			this->m_vChildren.erase(this->m_vChildren.begin() + i);
			break;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::Add(BasePanel* pPanel)
///
/// \brief	Adds a panel to this panel.  This function does not mark the panel's parent as this
/// 		panel.
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::Add(BasePanel* pPanel)
{
	this->m_vChildren.push_back(pPanel);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	bool BasePanel::Paint(int w, int h)
////////////////////////////////////////////////////////////////////////////////////////////////////

bool BasePanel::Paint(int w, int h)
{
	if (this->m_bVisible)
	{
		for (BasePanel* child : m_vChildren)
		{
			int _w, _h;
			child->GetSize(&_w, &_h);

			child->Paint(_w, _h);
		}
		return true;
	}
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::Think()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::Think()
{
	// Initialize panel on first tick
	if (!this->m_bInitialized)
	{
		this->m_bInitialized = true;
		this->Init();
	}

	int x, y;
	MouseUtil::GetMousePos(&x, &y);

	bool hovered = false;
	bool lclicked = GetAsyncKeyState(VK_LBUTTON);
	bool rclicked = GetAsyncKeyState(VK_RBUTTON);

	int mx, my;
	this->GetRealPos(&mx, &my);

	if (MouseUtil::GetCursorVisible() && m_bVisible)
	{
		if ((x >= mx && x <= (int)(mx + this->m_iWidth)) &&
			(y >= my && y <= (int)(my + this->m_iHeight)))
		{
			hovered = true;
		}
	}

	int localX = x - this->m_iX;
	int localY = y - this->m_iY;

	if (hovered && (this->m_iLastMouseX != localX || this->m_iLastMouseY != localY))
	{
		this->OnMouseMove(localX, localY);

		this->m_iLastMouseX = localX;
		this->m_iLastMouseY = localY;
	}
			
	// Panel was hovered, now it's not
	if (this->IsHovered() && !hovered)
	{
		this->m_iPanelAttributes &= ~PA_HOVERED;
		this->OnMouseExited();
	}

	// Panel wasn't hovered, now it is
	if (!this->IsHovered() && hovered)
	{
		this->m_iPanelAttributes |= PA_HOVERED;
		this->OnMouseEntered();
	}

	// Panel was clicked, now it isn't
	if (this->IsLeftClicked() && (!lclicked || !hovered))
	{
		this->m_iPanelAttributes &= ~PA_LCLICKED;
		this->OnLeftClickReleased();
		this->OnClickReleased();
	}

	// Panel wasn't clicked, now it is
	if (!this->IsLeftClicked() && lclicked && hovered)
	{
		this->m_iPanelAttributes |= PA_LCLICKED;
		this->OnLeftClick();
		this->OnClick();
	}

	// Panel was clicked, now it isn't
	if (this->IsRightClicked() && (!rclicked || !hovered))
	{
		this->m_iPanelAttributes &= ~PA_RCLICKED;
		this->OnRightClickReleased();
		this->OnClickReleased();
	}

	// Panel wasn't clicked, now it is
	if (!this->IsRightClicked() && rclicked && hovered)
	{
		this->m_iPanelAttributes |= PA_RCLICKED;
		this->OnRightClick();
		this->OnClick();
	}

	// Think for all of the children
	for (BasePanel* child : m_vChildren)
	{
		child->Think();
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	bool BasePanel::IsHovered()
////////////////////////////////////////////////////////////////////////////////////////////////////

bool BasePanel::IsHovered()
{
	return (this->m_iPanelAttributes & PA_HOVERED) == PA_HOVERED;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	bool BasePanel::IsLeftClicked()
////////////////////////////////////////////////////////////////////////////////////////////////////

bool BasePanel::IsLeftClicked()
{
	return (this->m_iPanelAttributes & PA_LCLICKED) == PA_LCLICKED;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	bool BasePanel::IsRightClicked()
////////////////////////////////////////////////////////////////////////////////////////////////////

bool BasePanel::IsRightClicked()
{
	return (this->m_iPanelAttributes & PA_RCLICKED) == PA_RCLICKED;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::GetMouseOffset(int* x, int* y)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::GetMouseOffset(int* x, int* y)
{
	*x = this->m_iLastMouseX;
	*y = this->m_iLastMouseY;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::Init()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::Init()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::Shutdown()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::Shutdown()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnMouseEntered()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnMouseEntered()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnMouseExited()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnMouseExited()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnClick()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnClick()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnClickReleased()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnClickReleased()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnLeftClick()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnLeftClick()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnLeftClickReleased()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnLeftClickReleased()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnRightClick()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnRightClick()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnRightClickReleased()
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnRightClickReleased()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::OnMouseMove(int x, int y)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::OnMouseMove(int x, int y)
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::DrawString(SrcHFont hFont, int x, int y, dword dwCol, uint32 iFlags,
/// 	const char* pszText, ...)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::DrawString(SrcHFont hFont, int x, int y, dword dwCol, uint32 iFlags, const char* pszText, ...)
{
	va_list va_alist;
	char buf[1024] = { '\0' };
	wchar_t str[1024] = { '\0' };

	va_start(va_alist, pszText);
	vsprintf_s(buf, pszText, va_alist);
	va_end(va_alist);

	wsprintfW(str, L"%S", buf);

	this->TranslateToRealPos(&x, &y);
	RenderUtil::DrawString(hFont, x, y, dwCol, iFlags, str);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::DrawString(SrcHFont hFont, int x, int y, dword dwCol, uint32 iFlags,
/// 	const wchar_t* pszText, ...)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::DrawString(SrcHFont hFont, int x, int y, dword dwCol, uint32 iFlags, const wchar_t* pszText, ...)
{
	va_list va_alist;
	wchar_t str[1024] = { '\0' };

	va_start(va_alist, pszText);
	wsprintfW(str, pszText, va_alist);
	va_end(va_alist);

	this->TranslateToRealPos(&x, &y);
	RenderUtil::DrawString(hFont, x, y, dwCol, iFlags, str);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::DrawFilledRect(int x0, int y0, int x1, int y1)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::DrawFilledRect(int x0, int y0, int x1, int y1)
{
	this->TranslateToRealPos(&x0, &y0);
	this->TranslateToRealPos(&x1, &y1);

	Src::Surface->DrawFilledRect(x0, y0, x1, y1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void DrawOutlinedRect(int x0, int y0, int x1, int y1)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::DrawOutlinedRect(int x0, int y0, int x1, int y1)
{
	this->TranslateToRealPos(&x0, &y0);
	this->TranslateToRealPos(&x1, &y1);
	Src::Surface->DrawOutlinedRect(x0, y0, x1, y1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::DrawLine(int x0, int y0, int x1, int y1)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::DrawLine(int x0, int y0, int x1, int y1)
{
	this->TranslateToRealPos(&x0, &y0);
	this->TranslateToRealPos(&x1, &y1);
	Src::Surface->DrawLine(x0, y0, x1, y1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::DrawPolyLine(int *px, int *py, int numPoints)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::DrawPolyLine(int *px, int *py, int numPoints)
{
	for (int i = 0; i < numPoints; i++)
	{
		this->TranslateToRealPos(&px[i], &py[i]);
	}

	Src::Surface->DrawPolyLine(px, py, numPoints);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \fn	void BasePanel::DrawTexturedRect(int x0, int y0, int x1, int y1)
////////////////////////////////////////////////////////////////////////////////////////////////////

void BasePanel::DrawTexturedRect(int x0, int y0, int x1, int y1)
{
	this->TranslateToRealPos(&x0, &y0);
	this->TranslateToRealPos(&x1, &y1);
	Src::Surface->DrawTexturedRect(x0, y0, x1, y1);
}